{"mappings":"AAmBA,SAAAA,EAAwBC,EAAGC,EAAGC,GAC5BC,OAAOC,eAAeJ,EAAGC,EAAAA,CAAII,IAAKH,EAAGI,YAAY,aCpB5C,SAAAC,EAAsBP,EAAEQ,GAC7BA,EAAa,cAAA,CAAeC,UAAWD,IAGlC,SAAAE,EAAgBV,EAAGQ,GACxBA,EAAa,gBAAA,CAAiBC,UAAWD,IAGpC,SAAAG,EAAiBX,EAAGQ,GACzBA,EAAa,eAAA,CAAgBC,UAAWD,IAGnC,SAAAI,EAAsBZ,EAAGQ,GAC9BA,EAAa,kBAAmBR,EAAEa,OAAOC,cAEpCd,EAAEa,OAAOE,SAASC,QAAQ,GAAK,GAAGA,YAAehB,EAAEa,OAAOC,YAAYE,QAAQ,IACjFR,EAAa,YAAA,CAAaC,UAAWD,IAGlC,SAAAS,EAAmBjB,EAAGQ,GAC3BU,OAAOV,aAAa,gBAAA,CAAiBC,UAAWD,ICjBlD,SAAAW,EAAmBC,UACjBC,MAASC,OAAOC,SAASC,cAAc,SACvCH,MAAMI,IAAML,EACZC,MAAMK,UAAS,EACRL,+MA0CTC,OAAOK,QA1BP,SAAiBP,EAAS,GAAIQ,MACL,iBAAbR,EAAa,MAAA,IACXS,MAAM,oEAEZX,EC3BD,iBACCY,EAAUP,SAASC,cAAc,OACjCO,EAAAA,UAGJC,UAAU,CAACC,EAAQC,KACoB,gBAA3BH,EAAcE,KACtBF,EAAcE,GAAAA,IAEhBF,EAAcE,GAASE,KAAKD,GAC5BJ,EAAQM,iBAAiBH,EAAQC,IAGnCG,YAAY,CAACC,EAAIJ,KACfH,EAAcO,GAAKC,OAAOR,EAAcO,GAAKE,QAAQN,GAAU,GAC/DJ,EAAQW,oBAAoBR,QAAWF,EAAcO,GAAKP,EAAcO,GAAKE,QAAQN,MAGvF1B,aAAa,CAACyB,EAAQS,WACdC,EAAAA,IAAYC,MAAMX,GACxBU,EAAMD,KAAOA,EACbZ,EAAQe,cAAcF,KDMpBzB,GACAG,EAlBR,SAA0BA,EAAOH,UAC/BG,EAAMe,iBAAiB,cAAapC,GAAAA,EAA8BA,EAAEkB,EAAOV,gBAAc,GACzFa,EAAMe,iBAAiB,QAAOpC,GAAAA,EAAwBA,EAAEkB,EAAOV,gBAAc,GAC7Ea,EAAMe,iBAAiB,SAAQpC,GAAAA,EAAyB8C,KAAK9C,EAAEkB,EAAOV,gBAAc,GACpFa,EAAMe,iBAAiB,SAAQpC,IAAAA,GAAyB8C,KAAK9C,EAAEkB,EAAOV,iBAAc,GACpFa,EAAMe,iBAAiB,WAAUpC,GAAAA,EAA2B8C,KAAK9C,EAAEkB,EAAOV,gBAAc,GACxFa,EAAMe,iBAAiB,cAAapC,GAAAA,EAA8BA,EAAEkB,EAAOV,gBAAc,GACzFU,EAAOc,UAAU,aAAYhC,GAAGqB,EAAM0B,SACtC7B,EAAOc,UAAU,cAAahC,GAAGqB,EAAM2B,UAChC3B,EASO4B,CAAiB9B,EAAUC,GAAUF,UAEnDU,EAAKsB,YAAa/C,OAAOgD,OAAO9B,KAG5BW,UAAAA,SAAUoB,EAAUC,UAAcnC,EAAOc,UAAUoB,EAAUC,GAAsBC,MACnFjB,YAAAA,SAAYe,EAAUC,UAAcnC,EAAOmB,YAAYe,EAAUC,GAAsBC,MACvFC,aAAAA,kBAAelC,EAAMK,UAAS,EAAc4B,MAC5CE,aAAAA,kBAAenC,EAAMK,UAAS,EAAa4B,MAC3CP,KAAAA,kBACE7B,EAAOV,aAAa,aACb8C,MAETN,MAAAA,kBACE9B,EAAOV,aAAa,cACb8C","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/event-handler.js","./src/main.js","./src/pubsub.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","export function onVideoReady(e,triggerEvent){\n  triggerEvent(\"playerReady\",{fireEvent: triggerEvent});\n}\n\nexport function onPlay(e, triggerEvent){\n  triggerEvent(\"playerStarted\",{fireEvent: triggerEvent});\n}\n\nexport function onPause(e, triggerEvent){\n  triggerEvent(\"playerPaused\",{fireEvent: triggerEvent});\n}\n\nexport function onTimeupdate(e, triggerEvent){\n  triggerEvent(\"playerProgress:\" ,e.target.currentTime)\n\n  if( (e.target.duration.toFixed(0) / 2).toFixed() ===  e.target.currentTime.toFixed(0))\n    triggerEvent(\"50percent\",{fireEvent: triggerEvent})\n}\n\nexport function onPlaying(e, triggerEvent){\n  pubSub.triggerEvent(\"playerPlaying\",{fireEvent: triggerEvent});\n}\n","import * as EventHandlers from './event-handler'\nimport {createPubSub} from './pubsub'\n\nfunction initVideo(videoUrl){\n  video =  window.document.createElement(\"video\")\n  video.src = videoUrl\n  video.controls=true\n  return video\n}\n\nfunction addVideoHandlers(video, pubSub){\n  video.addEventListener(\"videoready\",e=>EventHandlers.onVideoReady(e,pubSub.triggerEvent),false)\n  video.addEventListener(\"play\",e=>EventHandlers.onPlay(e,pubSub.triggerEvent),false)\n  video.addEventListener(\"pause\",e=>EventHandlers.onPause.bind(e,pubSub.triggerEvent),false)\n  video.addEventListener(\"ended\",e=>EventHandlers.onEnded.bind(e,pubSub.triggerEvent),false)\n  video.addEventListener(\"playing\",e=>EventHandlers.onPlaying.bind(e,pubSub.triggerEvent),false)\n  video.addEventListener(\"timeupdate\",e=>EventHandlers.onTimeupdate(e,pubSub.triggerEvent),false)\n  pubSub.subscribe(\"playVideo\",e=>video.play())\n  pubSub.subscribe(\"pauseVideo\",e=>video.pause())\n  return video\n}\n\n\nfunction acVideo(videoUrl=\"\", node){\n  if(typeof videoUrl !== \"string\" )\n    throw new Error(\"A string of a url must be used in the constructor argument\")\n\n  const pubSub = createPubSub()\n  const video = addVideoHandlers(initVideo(videoUrl),pubSub)\n\n  node.appendChild( Object.freeze(video) )\n\n  return {\n      subscribe(eventName,eventHandler){pubSub.subscribe(eventName,eventHandler); return this},\n      unsubscribe(eventName,eventHandler){pubSub.unsubscribe(eventName,eventHandler); return this},      \n      hideControls(){video.controls=false; return this},\n      showControls(){video.controls=true; return this},\n      play(){\n        pubSub.triggerEvent(\"playVideo\")\n        return this\n      },\n      pause(){\n        pubSub.triggerEvent(\"pauseVideo\")\n        return this\n      },\n\n    }\n}\n\nwindow.acVideo = acVideo","export function createPubSub(){\n  const domNode = document.createElement(\"div\")\n  const subscriptions = {}\n\n  return {\n    subscribe:(evtName,handler)=>{\n      if(typeof subscriptions[evtName] !== 'array')\n        subscriptions[evtName] =[]\n\n      subscriptions[evtName].push(handler)\n      domNode.addEventListener(evtName,handler)\n\n    },\n    unsubscribe:(evt,handler)=>{\n      subscriptions[evt].splice(subscriptions[evt].indexOf(handler), 1)\n      domNode.removeEventListener(evtName,   subscriptions[evt][subscriptions[evt].indexOf(handler)] )\n\n    },\n    triggerEvent:(evtName,data)=>{\n      const event = new Event(evtName)\n      event.data = data\n      domNode.dispatchEvent(event)\n    }\n  }\n}"],"names":["$parcel$export","e","n","v","Object","defineProperty","get","enumerable","$406dfcdac169bce5595c43e9223c71fd$export$onVideoReady","triggerEvent","fireEvent","$406dfcdac169bce5595c43e9223c71fd$export$onPlay","$406dfcdac169bce5595c43e9223c71fd$export$onPause","$406dfcdac169bce5595c43e9223c71fd$export$onTimeupdate","target","currentTime","duration","toFixed","$406dfcdac169bce5595c43e9223c71fd$export$onPlaying","pubSub","$bff6b07e52095cdb3cb87535c3305bd2$var$initVideo","videoUrl","video","window","document","createElement","src","controls","acVideo","node","Error","domNode","subscriptions","subscribe","evtName","handler","push","addEventListener","unsubscribe","evt","splice","indexOf","removeEventListener","data","event","Event","dispatchEvent","bind","play","pause","$bff6b07e52095cdb3cb87535c3305bd2$var$addVideoHandlers","appendChild","freeze","eventName","eventHandler","this","hideControls","showControls"],"version":3,"file":"index.js.map"}